
==================== FINAL INTERFACE ====================
2016-04-10 00:34:29.289074 UTC

interface main@main:Main 7103
  interface hash: 17c8bba275fffc1ed4f321109bc490e0
  ABI hash: a30e58ded9b568d1e13374820b469ebd
  export-list hash: a49eab51eb8cfdd34aefad2e38b599c4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 104a6743a8834726bea72cd4ddeec283
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.algorithm
  Main.caseParser
  Main.formatCase
  Main.getJamCoinFactor
  Main.getJamCoinFactors
  Main.getJamCoinValue
  Main.getJamCoinsWithFactors
  Main.main
  Main.makeJamCoinCandidate
  Main.makeJamCoinCandidates
  Main.paddedBinary
  Main.value2Binary
module dependencies:
package dependencies: arithmoi-0.4.1.3@arith_C4c4JmqdUJaEBNAlRHjNlW
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      gcj-qualification-round-c-0.1.0.0@gcjqu_CNpVupVDhUL3xmmT0zJifn
                      ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      parsec-3.1.9@parse_7aUabKPjr5W6Al5Ge35AQl
                      random-1.1@rando_9Kgekc9yEaLHLNUuw6paWL
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.Format.Parse
         time-1.5.0.1@time_FTheb6LSxyX1UABIbBXRfn:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
import  -/  arithmoi-0.4.1.3@arith_C4c4JmqdUJaEBNAlRHjNlW:Math.NumberTheory.Primes.Factorisation f8ac8aa599b97e74217700aac3ad9c19
import  -/  arithmoi-0.4.1.3@arith_C4c4JmqdUJaEBNAlRHjNlW:Math.NumberTheory.Primes.Factorisation.Montgomery a3528d39c07e5a9a4abfff5915a0715a
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  gcj-qualification-round-c-0.1.0.0@gcjqu_CNpVupVDhUL3xmmT0zJifn:Boilerplate 1f99a8f5f820881fec384b0792073a40
import  -/  gcj-qualification-round-c-0.1.0.0@gcjqu_CNpVupVDhUL3xmmT0zJifn:DataTypes 4926a6d54850a500067cc12ae490f186
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  integer-gmp-1.0.0.0:GHC.Integer.Type 371e90fe753f08ddedf0d2657a9ef5c4
import  -/  parsec-3.1.9@parse_7aUabKPjr5W6Al5Ge35AQl:Text.Parsec.String 3c296b52e129c40cc2a72bba97572ba8
import  -/  parsec-3.1.9@parse_7aUabKPjr5W6Al5Ge35AQl:Text.ParserCombinators.Parsec fe30d587c0b508789a0c58bc8d5cf015
d21ed29b2cc9fa8b25e7950e27e8f344
  $wlvl ::
    [GHC.Types.Int] -> [GHC.Integer.Type.Integer] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Types.Int]
                   ww1 :: [GHC.Integer.Type.Integer] ->
                 let {
                   z :: [GHC.Types.Char]
                   = GHC.CString.unpackAppendCString#
                       " "#
                       (case Main.formatCase_go ww1 of wild {
                          [] -> GHC.Types.[] @ GHC.Types.Char : ds1 xs -> xs })
                 } in
                 letrec {
                   go :: [GHC.Types.Int] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [GHC.Types.Int] ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> case y of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 0
                                 ww3
                                 (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                            (go ys) } } }
                 } in
                 go ww) -}
707e799da573c37f391d44c4d66e532f
  $wmakeJamCoinCandidates :: GHC.Prim.Int# -> [DataTypes.JamCoin]
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ->
                 let {
                   x :: GHC.Prim.Int# = GHC.Prim.-# ww 2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# x 0) of wild1 {
                   GHC.Types.False
                   -> let {
                        $j :: GHC.Prim.Int# -> [DataTypes.JamCoin]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x1 :: GHC.Prim.Int#[OneShot] ->
                          let {
                            y :: GHC.Prim.Int# = GHC.Prim.-# x1 1
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># 0 y) of wild {
                            GHC.Types.False
                            -> letrec {
                                 go :: GHC.Prim.Int# -> [DataTypes.JamCoin]
                                   {- Arity: 1, Strictness: <L,U> -}
                                 = \ x2 :: GHC.Prim.Int# ->
                                   GHC.Types.:
                                     @ DataTypes.JamCoin
                                     (GHC.Types.:
                                        @ GHC.Types.Int
                                        Main.makeJamCoinCandidates2
                                        (GHC.Base.++
                                           @ GHC.Types.Int
                                           (Main.$wpaddedBinary x x2)
                                           Main.makeJamCoinCandidates1))
                                     (case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.==# x2 y) of wild2 {
                                        GHC.Types.False -> go (GHC.Prim.+# x2 1)
                                        GHC.Types.True -> GHC.Types.[] @ DataTypes.JamCoin })
                               } in
                               go 0
                            GHC.Types.True -> GHC.Types.[] @ DataTypes.JamCoin }
                      } in
                      case x of wild2 {
                        DEFAULT -> case GHC.Real.$wf1 2 wild2 of ww4 { DEFAULT -> $j ww4 }
                        0 -> $j 1 }
                   GHC.Types.True
                   -> case GHC.Real.^2 ret_ty [DataTypes.JamCoin] of {} }) -}
31d9c08a25266e311360a746cd86e822
  $wpaddedBinary :: GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: GHC.Prim.Int# ->
                 let {
                   binary :: [GHC.Types.Int]
                   = GHC.List.reverse1
                       @ GHC.Types.Int
                       (Main.$wvalue2Binary ww1)
                       (GHC.Types.[] @ GHC.Types.Int)
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Int binary 0 of ww2 { DEFAULT ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.-# ww ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# 0 y) of wild {
                   GHC.Types.False -> binary
                   GHC.Types.True
                   -> let {
                        lvl7 :: [GHC.Types.Int]
                        = GHC.Types.: @ GHC.Types.Int Main.makeJamCoinCandidates3 binary
                      } in
                      letrec {
                        $wxs :: GHC.Prim.Int# -> [GHC.Types.Int]
                          {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                        = \ ww3 :: GHC.Prim.Int# ->
                          case ww3 of ds1 {
                            DEFAULT
                            -> GHC.Types.:
                                 @ GHC.Types.Int
                                 Main.makeJamCoinCandidates3
                                 ($wxs (GHC.Prim.-# ds1 1))
                            1 -> lvl7 }
                      } in
                      $wxs y } }) -}
67efa851200a16f9814e1aff7732350c
  $wvalue2Binary :: GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
e423a1ac906332ca2e37321710b058ed
  algorithm :: DataTypes.Case -> DataTypes.SolvedCase
  {- Arity: 1, Strictness: <S(SL),1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: (GHC.Types.Int, GHC.Types.Int) ->
                 case ds of wild { (,) size count ->
                 Main.getJamCoinsWithFactors
                   count
                   (Main.makeJamCoinCandidates size) }) -}
6d687b600741d2388798d53af5fba5a9
  caseParser :: Text.Parsec.String.Parser DataTypes.Case
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.caseParser1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <DataTypes.Case>_R)) -}
5b0a6d4c04da86ce57fb195a08310e96
  caseParser1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (DataTypes.Case
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (DataTypes.Case
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
674996897e7026fb343af5aa0bbc0a9d
  formatCase :: DataTypes.SolvedCase -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ scase :: DataTypes.SolvedCase ->
                 GHC.CString.unpackAppendCString#
                   "\n"#
                   (case GHC.Base.map
                           @ ([GHC.Types.Int], [GHC.Integer.Type.Integer])
                           @ [GHC.Types.Char]
                           Main.formatCase2
                           scase of wild {
                      [] -> GHC.Types.[] @ GHC.Types.Char
                      : x xs1
                      -> Data.OldList.intercalate_$spoly_go
                           @ GHC.Types.Char
                           x
                           (Data.OldList.prependToAll
                              @ [GHC.Types.Char]
                              Main.formatCase1
                              xs1) })) -}
1031bafbae5cef24a65188062424d0dc
  formatCase1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
6db103fc94bbd0b3e68e8d45095b4a47
  formatCase2 ::
    ([GHC.Types.Int], [GHC.Integer.Type.Integer]) -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([GHC.Types.Int], [GHC.Integer.Type.Integer]) ->
                 case w of ww { (,) ww1 ww2 -> Main.$wlvl ww1 ww2 }) -}
2013fddb3138dbe14cbaa6d0ecb0be80
  formatCase_go :: [GHC.Integer.Type.Integer] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
a5d7179b1db237c7e3e8a4e06d120031
  getJamCoinFactor ::
    GHC.Types.Int
    -> DataTypes.JamCoin -> GHC.Base.Maybe GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ base :: GHC.Types.Int jamcoin :: DataTypes.JamCoin ->
                 case Math.NumberTheory.Primes.Factorisation.Montgomery.factorise
                        (Main.getJamCoinValue base jamcoin) of wild {
                   []
                   -> case Main.getJamCoinFactor1
                      ret_ty (GHC.Base.Maybe GHC.Integer.Type.Integer)
                      of {}
                   : ds factors
                   -> case ds of wild1 { (,) v e ->
                      case factors of wild2 {
                        [] -> GHC.Base.Nothing @ GHC.Integer.Type.Integer
                        : ds1 ds2 -> GHC.Base.Just @ GHC.Integer.Type.Integer v } } }) -}
a6165def6622b7fa12f2b78c96cb107f
  getJamCoinFactor1 ::
    (GHC.Integer.Type.Integer,
     GHC.Types.Int,
     [(GHC.Integer.Type.Integer, GHC.Types.Int)])
  {- Strictness: b -}
9f661aab92cf74e64c692cc578ed3397
  getJamCoinFactors ::
    DataTypes.JamCoin
    -> [GHC.Types.Int] -> GHC.Base.Maybe [GHC.Integer.Type.Integer]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
2231f92659ddb738eb8d01aaf270de08
  getJamCoinValue ::
    GHC.Types.Int -> DataTypes.JamCoin -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,U(U)><S,U>,
     Unfolding: (\ base :: GHC.Types.Int jamcoin :: DataTypes.JamCoin ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Int
                        jamcoin
                        0 of ww2 { DEFAULT ->
                 let {
                   x1 :: GHC.Prim.Int# = GHC.Prim.-# ww2 1
                 } in
                 let {
                   x2 :: GHC.Prim.Int# = GHC.Prim.-# ww2 2
                 } in
                 let {
                   c :: GHC.Types.Int
                        -> ([GHC.Types.Int]
                            -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
                        -> [GHC.Types.Int]
                        -> GHC.Integer.Type.Integer
                        -> GHC.Integer.Type.Integer
                     {- Arity: 3, Strictness: <L,U(U)><L,1*C1(U)><S,1*U> -}
                   = \ _x :: GHC.Types.Int
                       _r :: [GHC.Types.Int]
                             -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer[OneShot]
                       ds :: [GHC.Types.Int] ->
                     case ds of wild {
                       [] -> GHC.Base.id @ GHC.Integer.Type.Integer
                       : y ys
                       -> let {
                            ds1 :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer = _r ys
                          } in
                          let {
                            lvl7 :: GHC.Integer.Type.Integer
                            = case _x of wild1 { GHC.Types.I# x ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<# x 0) of wild2 {
                                GHC.Types.False
                                -> case x of wild3 {
                                     DEFAULT
                                     -> case base of wild4 { GHC.Types.I# i ->
                                        GHC.Real.$wf (GHC.Integer.Type.smallInteger i) wild3 }
                                     0 -> GHC.Real.$fEnumRatio2 }
                                GHC.Types.True -> GHC.Real.^1 } }
                          } in
                          \ eta :: GHC.Integer.Type.Integer ->
                          ds1
                            (case y of wild1 { GHC.Types.I# i ->
                             GHC.Integer.Type.plusInteger
                               eta
                               (GHC.Integer.Type.timesInteger
                                  lvl7
                                  (GHC.Integer.Type.smallInteger i)) }) }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# x2 x1) of wild {
                   GHC.Types.False
                   -> GHC.Enum.efdtIntDnFB
                        @ ([GHC.Types.Int]
                           -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
                        c
                        Main.getJamCoinValue_n
                        x1
                        x2
                        0
                        jamcoin
                        Main.getJamCoinValue1
                   GHC.Types.True
                   -> GHC.Enum.efdtIntUpFB
                        @ ([GHC.Types.Int]
                           -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer)
                        c
                        Main.getJamCoinValue_n
                        x1
                        x2
                        0
                        jamcoin
                        Main.getJamCoinValue1 } }) -}
2ed9674a507927eae9c1f770269d14d4
  getJamCoinValue1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
2495b9272c1e2e96f157a8552d4af306
  getJamCoinValue_n ::
    [GHC.Types.Int]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ ds :: [GHC.Types.Int] eta :: GHC.Integer.Type.Integer -> eta) -}
b90ef380b34cc29e59ac5b15a8f99d0f
  getJamCoinsWithFactors ::
    GHC.Types.Int
    -> [DataTypes.JamCoin]
    -> [(DataTypes.JamCoin, [GHC.Integer.Type.Integer])]
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
ee6b0463313cbc21d4cb3e0da626259b
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a6de4912ae23b4753b046ffdfcc4fb64
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Boilerplate.makeMain1
                   @ DataTypes.SolvedCase
                   Main.algorithm
                   Main.caseParser1
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <DataTypes.Case>_R))
                   Main.formatCase) -}
4fba5dd64c1523da506b6670e11c2beb
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
65d183870415c60c69bfd04a39b08dbb
  makeJamCoinCandidate ::
    GHC.Types.Int -> GHC.Types.Int -> DataTypes.JamCoin
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GHC.Types.Int ->
                 GHC.Types.:
                   @ GHC.Types.Int
                   Main.makeJamCoinCandidates2
                   (case w of wild { GHC.Types.I# x ->
                    case w1 of ww { GHC.Types.I# ww1 ->
                    GHC.Base.++
                      @ GHC.Types.Int
                      (Main.$wpaddedBinary (GHC.Prim.-# x 2) ww1)
                      Main.makeJamCoinCandidates1 } })) -}
5e6b90629a28454f69db8867b40fb0ea
  makeJamCoinCandidates :: GHC.Types.Int -> [DataTypes.JamCoin]
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wmakeJamCoinCandidates ww1 }) -}
d9b16e3f2cefd845c07f991d8b4c7071
  makeJamCoinCandidates1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.makeJamCoinCandidates2
                   (GHC.Types.[] @ GHC.Types.Int)) -}
621ad97d6f81a435c0cb94dced00c52a
  makeJamCoinCandidates2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
5771178485801ad5695f24bc6b1a43b2
  makeJamCoinCandidates3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
80de8e2df1f62e62173f5c969fe12206
  paddedBinary :: GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Main.$wpaddedBinary ww1 ww3 } }) -}
4afcd51a0a7a481c070318306f2d40b6
  value2Binary :: GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wvalue2Binary ww1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

